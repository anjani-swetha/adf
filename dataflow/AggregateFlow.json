{
	"name": "AggregateFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Empdata",
						"type": "DatasetReference"
					},
					"name": "Emp"
				},
				{
					"dataset": {
						"referenceName": "DeptData",
						"type": "DatasetReference"
					},
					"name": "Dept"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Emp_Dept_Data",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "DeptbasedEmp"
				},
				{
					"name": "joinDept"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Name as string,",
				"          Salary as string,",
				"          DeptNo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Emp",
				"source(output(",
				"          DeptNo as integer,",
				"          Dept_Name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Dept",
				"Emp aggregate(groupBy(DeptNo),",
				"     NoOfPeople = count(Name)) ~> DeptbasedEmp",
				"DeptbasedEmp, Dept join(DeptbasedEmp@DeptNo == Dept@DeptNo,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinDept",
				"joinDept sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Name as string,",
				"          Category as string,",
				"          Status as string,",
				"          Error as string",
				"     ),",
				"     partitionFileNames:['emp_dept.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}